2 * 2
x = 10
y = 20
# Criação de variáveis
x = 10
y = 20
# Maior que
x > 5
# Menor que
x < 5
# Maior ou igual
y >= 10
# Menor ou igual
y <= 100
# Igual
x == 10
# Diferente
x != 10
# Or
(x == 10) | (x >= 5)
(x == 10) | (x >= 10)
(x == 10) | (x <= 20)
(x == 10) | (y != 20)
(x == 10) | (x <= 10)
(x == 20) | (x <= 10)
(x == 20) | (x == 100)
print(!x > 0)
setwd("C:/r-language/pt01")
setwd("C:\r-language")
# Vizualizando o diretório de trabalho
getwd()
# Setando o diretório de trabalho
setwd("C:\r-language\pt01")
# Setando o diretório de trabalho
setwd("C:\r-language\pt01")
setwd("C:\r-language\pt01")
# Vetor de strings
vetor_string = c("Linguagem", "R")
vetor_string
# Vetor de floats
vetor_float = c(5.75, 55.333, 100.55)
vetor_float
# Vetor de números complexos
vetor_num_complexo = c(5.5+2i, 2.5+2i)
vetor_num_complexo
# Vetor de valores lógicos
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
# Vetor de números inteiros
vetor_integer  = c(5, 10, 15, 20, 25, 50, 100)
vetor_integer
# Utilizandoa função seq()
vetor = seq(1:10)
vetor
is.vector(vetor)
# Utilizando a função rep()
vetor_a = rep(1:5)
vetor_a
is.vector(vetor_a)
# Indexação de vetores
a <- c(1, 2, 3, 4, 5)
a
a[1]
a[6]
# Combinando vetores
vetor_x = c(5, 10, 15)
vetor_y = c("Aa", "Bb", "Cc", "Dd", "Ee")
c(v1, v2)
c(vetor_x, vetor_y)
# Operações com vetores
x = c(5, 10, 15, 30, 60)
y = c(120, 240, 480, 960)
x * 2
x + y
x + y
960 * 2
# Operações com vetores
x = c(5, 10, 15, 30, 60)
y = c(120, 240, 480, 960, 1920)
x * 2
x + y
x - y
x * y
x / y
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
gama = alfa + beta
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
alfa + beta
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
alfa + beta
alfa + beta
# Vetor nomeado
vetor_nomeado = c("Sol", "Mercúrio", "Vênus", "Terra", "Marte", "Júpiter", "Saturno", "Urano", "Netuno")
vetor_nomeado
names(vetor_nomeado) = c("Sistema Solar")
vetor_nomeado
vetor_nomeado["Sist. Solar"]
# Vetor nomeado
vetor_nomeado = c("Sol", "Mercúrio", "Vênus", "Terra", "Marte", "Júpiter", "Saturno", "Urano", "Netuno")
vetor_nomeado
names(vetor_nomeado) = c("1", "2", "3", "4", "5", "6", "7", "8", "9")
vetor_nomeado
vetor_nomeado["4"]
# Quantidade de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
# Quantidade de colunas
matrix (c( 1,2,3,4,5,6), nc = 2)
# Quantidade de linhas
matrix(c(1,2,3,4,5,6), nrow = 2)
# Matrizes: quantidade de elementos múltiplos da quantidade de linhas
matrix (c(1,2,3,4,5), ncols = 2)
# Pedindo ajuda
?matrix
# Matrizes: quantidade de elementos múltiplos da quantidade de linhas
matrix (c(1,2,3,4,5), ncol = 2)
# Criação de matrizes a partir de vetores com preenchimento a partir das linhas
dados = c(1:10)
matrix(data = dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = dados, nrow = 5, ncol = 2)
# Fatiando matriz
mat <- matrix(c(2,3,4,5), nr = 2)
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nr = 2)
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nr = 2)
matriz
matriz[1,2]
matriz[2,2]
matriz[1,3]
matriz[,2]
# Fatiando matriz
matriz <- matrix(c(2,3,4,5))
matriz
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nc = 2)
matriz
# Criando matriz diagonal
matriz = 1:3
diag(matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag(vetor)
# Transposta da matriz
x <- matrix(c(2, 4, 6, 8), nr = 2, ncol = 2)
x
t(x)
y <- t(x)
y
# Obtendo matriz inversa
solve(x)
# Operações com matrizes
matriz_1 <- matrix(c(5, 10, 15, 20), nr = 2)
matriz_1
matriz_2 <- matrix(c(-5, -10, -15, -20), nr = 2)
matriz_2
matriz_1 * matriz_2
matriz_1 / matriz_2
matriz_1 + matriz_2
matriz_1 - matriz_2
# Operações com matrizes
matriz_1 <- matrix(c(5, 10, 15, 20), nr = 2)
matriz_1
matriz_2 <- matrix(c(2, 2, 2, 2), nr = 2)
matriz_2
matriz_1 * matriz_2
matriz_1 / matriz_2
matriz_1 + matriz_2
matriz_1 - matriz_2
# Multiplicando Matriz com Vetor
vetor = c(1:4)
vetor
# Multiplicando Matriz com Vetor
vetor = c(1:5)
vetor
matriz <- matrix(c(5, 10, 15, 20), nr = 2)
vetor * matrix
# Multiplicando Matriz com Vetor
vetor = c(1:4)
vetor
matriz <- matrix(c(5, 10, 15, 20), nr = 2)
vetor * matrix
vetor * matriz
# Nomeando matrizes
matriz <- matrix(c('Einstein', 'Newton', 'Hawking', 'Planck'), nr = 2)
matriz
dimnames(matriz) = (list(c("Linha-01", "Linha-02"), c("Coluna-01", "Coluna-02")))
matriz
# Nomeando a matriz, no momento da sua criação
matrix(c(5, 10, 15, 20), nr = 2, nc = 2, dimnames = list(c("Linha-01", "Linha-02" ), c("Coluna-01", " Coluna-02")))
# Combinando matrizes
matriz_a <- matrix(c(2,3,4,5), nr = 2)
matriz_a
matriz_b <- matrix(c(6,7,8,9), nr = 2)
matriz_b
cbind(matriz_a, matriz_b)
rbind(matriz_a, matriz_b)
# Desconstruindo a matriz
c(matriz_a)
# Lista de strings
lista_string_1 = list('A', 'B', 'C')
lista_string_1
lista_string_2 = list(c("A", "A"), 'B', 'C')
lista_string_2
lista_string_3 = list(matrix(c("A", "A", "A", "A"), nr = 2), 'B', 'C')
lista_string_3
lista_string_1[[1][1]]
lista_string_1[[1]1]
lista_string_1[[1][1]]
lista_inteiros = list(5, 10, 15)
lista_inteiros
lista_float = list(5.95, 10.25, 100.55)
lista_float
lista_num_complexos = list(5.2+5i, 2.5+10i)
lista_num_complexos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta = list("Linguagem R", 100, TRUE)
lista_composta
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
?rnorm
# Fatiamento da lista
lista[1]
lista[2]
lista[[2]][1]
lista[[2]][1] = "Monica"
lista[[2]][1] = "Ampère"
lista
lista[[2]][2]
# Para nomear os elementos - Listas Nomeadas
names(lista) <- c("Inteiros", "Físicos", "Números")
lista
vetor_numerico <- 1:5
vetor_caracteres <- c("Aa", "Bb", "Cc", "Dd", "Ee")
lista <- list(Numeros = vetor_numerico, Letras = vetor_caracteres)
lista
lista <- list(numeros = vetor_numerico, letras = vetor_caracteres)
lista
# Nomeando diretamente os elementos
lista <- list(elemento-A = 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista <- list(elemento-A <- 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista_nomeada <- list(elemento-A = 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista_nomeada <- list(elementoA = 1:5, elementoB = c(5.5, 10.5))
lista_nomeada
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
# Trabalhando com elementos específicos da lista
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
names(lista) <- c("Inteiros", "Físicos", "Números")
lista
lista$Físicos
length(lista$Inteiros)
lista$Inteiros
# Verificando o comprimento da lista
length(lista)
# Retornando um elementos, dentro de uma nível específico da lista
lista$Físicos[2]
# Mode dos elementos
mode(lista$Números)
mode(lista$Físicos)
# Listas compostas
lista_composta = list("Linguagem R", 100, TRUE)
lista_composta
# Combinando duas listas
lista_combinada <- c(lista, lista_composta)
lista_combinada
# Transformando vetor em lista
vetor = c(1:5)
vetor
lista  = as.list(vetor)
lista
lista
# Unindo dois elementos em uma lista
matriz = matrix(1:10, nrow = 2)
matriz
vetor = c(1:10)
vetor
lista = list(matriz, vetor)
lista
# String
string <- "Isso é uma string!"
string
# String
string <- "Isso é uma string!"
string
pi = as.character(3.1415926535)
pi
class(pi)
# Concatenação de strings
nome = "Erwin"; sobrenome = "Schrödinger"
paste(nome, sobrenome)
cat(nome, sobrenome)
# Formatando a saída
sprintf("O %s, recebeu o premio NObel de Física em %d", "Erwin Schrödinger", 1933)
# Extraindo parte da string
string <- "Isso é uma string!"
substr(string, start=12, stop=17)
?substr
# Contando o número de caracteres
nchar(texto)
# Contando o número de caracteres
nchar(string)
# Alterando a capitalização
tolower("Histogramas e Elementos de Dados")
toupper("Histogramas e Elementos de Dados")
# Capitalização
tolower("Ciência de Dados com Linguagem R")
toupper("Ciência de Dados com Linguagem R")
# Usando stringr
library(stringr)
# Dividindo uma string em caracteres
?strsplit
strsplit("Ciência de Dados com Linguagem R", NULL)
# Dividindo uma string em caracteres, após o caracter espaço
strsplit("Ciência de Dados com Linguagem R", " ")
# Trabalhando com strings
string_x <- c("Ciência de Dados", "Linguagem R")
string_x
string_y <- c("Ciência de Dados", "Linguagem R")
string_y
# Adicionando 2 strings
String_vetor(c(string1, string2), sep = "")
# Adicionando 2 strings
str_c(c(string_x, string_y), sep = "")
# Podemos contar quantas vezes um caracter aparece no texto
str_count(string_y, "s")
# Localiza a primeira e última posição em que o caracter aparece na string
str_locate_all(string_y, "s")
# Localizando a primeira e última posição do caracter
str_locate_all(string_y, "s")
# Contando quantas vezes um caracter aparece no texto
str_count(string_y, "s")
# Localizando a primeira e última posição do caracter
str_locate_all(string_y, "s")
# Localizando a primeira e última posição do caracter
str_locate_all(string_y, "s")
# Localizando a primeira e última posição do caracter
str_locate_all(string_y, "s")
# Substitui a primeira ocorrência de um caracter
str_replace(string_y, "\\s", "")
# Substitui todas as ocorrências de um caracter
str_replace_all(string_y, "\\s", "")
# Contando quantas vezes um caracter aparece no texto
str_count(string_y, "s")
# Localizando a primeira e última posição do caracter
str_locate_all(string_y, "s")
# Substitui a primeira ocorrência de um caracter
str_replace(string_y, "\\s", "")
# Substitui todas as ocorrências de um caracter
str_replace_all(string_y, "\\s", "")
# Detectando padrões nas strings
string_1 <- "Ciência de Dados com R"
string_2 <- "Ciência de Dados - Linguagem R"
padrao <- "- Lin"
grepl(pattern = padrao, x = string_1)
padrao <- "Dados-Linguagem"
grepl(pattern = padrao, x = string_1)
padrao <- " - Lin"
grepl(pattern = padrao, x = string_1)
padrao <- " - Linguagem"
grepl(pattern = padrao, x = string_1)
padrao <- "com R"
grepl(pattern = padrao, x = string_1)
padrao <- "com r."
grepl(pattern = padrao, x = string_1)
# Criando dataframe vazio
df <- data.frame()
class(df)
df
# Criando vetores vazios
nome <- character()
idade <- numeric()
item <- numeric()
codigo <- integer()
df <- data.frame(c(nome, idade, iten, codigo))
df
df <- data.frame(c(nome, idade, item, codigo))
df
# Criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Thiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando dataframe com diversos vetores
df_pesquisa = data.frame(pais, nome, altura, codigo)
df_pesquisa
# Criando dataframe com diversos vetores
df = data.frame(pais, nome, altura, codigo)
df
# Criando vetores
pais = c("Portugal", "Inglaterra", "Irlanda", "Egito", "Brasil")
nome = c("Bruno", "Thiago", "Amanda", "Bianca", "Marta")
altura = c(1.88, 1.76, 1.53, 1.69, 1.68)
codigo = c(5001, 2183, 4702, 7965, 8890)
# Criando dataframe com diversos vetores
df_pesquisa = data.frame(pais, nome, altura, codigo)
df_pesquisa
view(df_pesquisa)
view(iris)
# Data Frames: dados de diferentes tipos
View(iris)
View(df_pesquisa)
# Adicionando novo vetor ao df_pesquisa
cor_olho = c("verde", "azul", "azul", "castanho", "castanho")
df_pesquisa_novo = cbind(df_pesquisa, cor_olho)
df_pesquisa_novo
View(df_pesquisa_novo)
# Informações sobre o dataframe
str(df_pesquisa_novo)
dim(df_pesquisa_novo)
length(df_pesquisa_novo)
# Obtendo vetor de um dataframe
df_pesquisa_novo$pais
df_pesquisa_novo$nome
# Extraindo valor único
df_pesquisa_novo[1,1]
df_pesquisa_novo[3,2]
# Extraindo valor único
df_pesquisa_novo[1,]
# Extraindo valor único
df_pesquisa_novo[1,1]
df_pesquisa_novo[3,2]
# Quantidade de linhas e colunas
nrow(df_pesquisa_novo)
ncol(df_pesquisa_novo)
# Primeiros elementos do df_pesquisa_novo
head(df_pesquisa_novo)
head(mtcars)
View(mtcars)
# Últimos elementos do dataframe
tail(pesq)
# Últimos elementos do dataframe
tail(df_pesquisa_novo)
tail(mtcars)
# Primeiros elementos do df_pesquisa_novo
head(df_pesquisa_novo, 2)
# Primeiros elementos do df_pesquisa_novo
head(df_pesquisa_novo)
# Data frames built-in do R
?mtcars
View(mtcars)
df_pesquisa_novo
# Filtro para um subset de dados que atendem a um critério
df_pesquisa_novo[altura < 1.60,]
# Filtro para um subset de dados que atendem a um critério
df_pesquisa_novo[altura < 1.60]
# Filtro para um subset de dados que atendem a um critério
df_pesquisa_novo[altura < 1.60,]
df_pesquisa_novo[altura < 1.60, c('codigo', 'olhos')]
df_pesquisa_novo[altura < 1.60, c('codigo', 'cor_olho')]
df_pesquisa_novo
# Filtro para um subset de dados que atendem a um critério
df_pesquisa_novo[altura < 1.60,]
df_pesquisa_novo[altura < 1.60, c('codigo', 'cor_olho')]
df_pesquisa_novo
df_pesquisa_novo[altura < 1.60, c('codigo', 'nome')]
# Dataframes Nomeados
names(df_pesquisa_novo) <- c("País", "Nome", "Altura", "Código", "Olhos")
df_pesquisa_novo
colnames(df_pesquisa_novo) <- c("Var 1", "Var 2", "Var 3", "Var 4", "Var 5")
rownames(df_pesquisa_novo) <- c("Obs 1", "Obs 2", "Obs 3", "Obs 4", "Obs 5")
df_pesquisa_novo
colnames(df_pesquisa_novo) <- c("VAR - PAÍS", "VAR - NOME", "VAR - ALTURA", "VAR - CÓDIGO", "VAR - COR DOS OLHOS")
rownames(df_pesquisa_novo) <- c("REGISTRO 1", "REGISTRO 2", "REGISTRO 3", "REGISTRO 4", "REGISTRO 5")
df_pesquisa_novo
# Carregando um arquivo csv
?read.csv
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
pacientes <- data.frame(read.csv(file = 'pacientes.csv', header = TRUE, sep = ","))
# Visualizando o dataset
View(pacientes)
head(pacientes)
summary(pacientes)
# Visualizando as variáveis
pacientes$Diabete
pacientes$status
pacientes$Status
# Histograma
hist(pacientes$Idade)
# Combinando dataframes
dataset_final <- merge(df_pesquisa_novo, pacientes)
dataset_final
View(dataset_final)
hist(dataset_final$ID)
hist(dataset_final$`VAR - PAÍS`)
hist(dataset_final$Idade)
