2 * 2
x = 10
y = 20
# Criação de variáveis
x = 10
y = 20
# Maior que
x > 5
# Menor que
x < 5
# Maior ou igual
y >= 10
# Menor ou igual
y <= 100
# Igual
x == 10
# Diferente
x != 10
# Or
(x == 10) | (x >= 5)
(x == 10) | (x >= 10)
(x == 10) | (x <= 20)
(x == 10) | (y != 20)
(x == 10) | (x <= 10)
(x == 20) | (x <= 10)
(x == 20) | (x == 100)
print(!x > 0)
setwd("C:/r-language/pt01")
setwd("C:\r-language")
# Vizualizando o diretório de trabalho
getwd()
# Setando o diretório de trabalho
setwd("C:\r-language\pt01")
# Setando o diretório de trabalho
setwd("C:\r-language\pt01")
setwd("C:\r-language\pt01")
# Vetor de strings
vetor_string = c("Linguagem", "R")
vetor_string
# Vetor de floats
vetor_float = c(5.75, 55.333, 100.55)
vetor_float
# Vetor de números complexos
vetor_num_complexo = c(5.5+2i, 2.5+2i)
vetor_num_complexo
# Vetor de valores lógicos
vetor_logico = c(TRUE, FALSE, TRUE, FALSE, FALSE)
vetor_logico
# Vetor de números inteiros
vetor_integer  = c(5, 10, 15, 20, 25, 50, 100)
vetor_integer
# Utilizandoa função seq()
vetor = seq(1:10)
vetor
is.vector(vetor)
# Utilizando a função rep()
vetor_a = rep(1:5)
vetor_a
is.vector(vetor_a)
# Indexação de vetores
a <- c(1, 2, 3, 4, 5)
a
a[1]
a[6]
# Combinando vetores
vetor_x = c(5, 10, 15)
vetor_y = c("Aa", "Bb", "Cc", "Dd", "Ee")
c(v1, v2)
c(vetor_x, vetor_y)
# Operações com vetores
x = c(5, 10, 15, 30, 60)
y = c(120, 240, 480, 960)
x * 2
x + y
x + y
960 * 2
# Operações com vetores
x = c(5, 10, 15, 30, 60)
y = c(120, 240, 480, 960, 1920)
x * 2
x + y
x - y
x * y
x / y
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
gama = alfa + beta
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
alfa + beta
# Somando vetores com quantidades diferentes de elementos
alfa = c(10, 20, 30)
beta = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
alfa + beta
alfa + beta
# Vetor nomeado
vetor_nomeado = c("Sol", "Mercúrio", "Vênus", "Terra", "Marte", "Júpiter", "Saturno", "Urano", "Netuno")
vetor_nomeado
names(vetor_nomeado) = c("Sistema Solar")
vetor_nomeado
vetor_nomeado["Sist. Solar"]
# Vetor nomeado
vetor_nomeado = c("Sol", "Mercúrio", "Vênus", "Terra", "Marte", "Júpiter", "Saturno", "Urano", "Netuno")
vetor_nomeado
names(vetor_nomeado) = c("1", "2", "3", "4", "5", "6", "7", "8", "9")
vetor_nomeado
vetor_nomeado["4"]
# Quantidade de linhas
matrix(c(1,2,3,4,5,6), nr = 2)
matrix(c(1,2,3,4,5,6), nr = 3)
matrix(c(1,2,3,4,5,6), nr = 6)
# Quantidade de colunas
matrix (c( 1,2,3,4,5,6), nc = 2)
# Quantidade de linhas
matrix(c(1,2,3,4,5,6), nrow = 2)
# Matrizes: quantidade de elementos múltiplos da quantidade de linhas
matrix (c(1,2,3,4,5), ncols = 2)
# Pedindo ajuda
?matrix
# Matrizes: quantidade de elementos múltiplos da quantidade de linhas
matrix (c(1,2,3,4,5), ncol = 2)
# Criação de matrizes a partir de vetores com preenchimento a partir das linhas
dados = c(1:10)
matrix(data = dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = dados, nrow = 5, ncol = 2)
# Fatiando matriz
mat <- matrix(c(2,3,4,5), nr = 2)
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nr = 2)
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nr = 2)
matriz
matriz[1,2]
matriz[2,2]
matriz[1,3]
matriz[,2]
# Fatiando matriz
matriz <- matrix(c(2,3,4,5))
matriz
# Fatiando matriz
matriz <- matrix(c(2,3,4,5), nc = 2)
matriz
# Criando matriz diagonal
matriz = 1:3
diag(matriz)
# Extraindo vetor de uma matriz diagonal
vetor = diag(matriz)
diag(vetor)
# Transposta da matriz
x <- matrix(c(2, 4, 6, 8), nr = 2, ncol = 2)
x
t(x)
y <- t(x)
y
# Obtendo matriz inversa
solve(x)
# Operações com matrizes
matriz_1 <- matrix(c(5, 10, 15, 20), nr = 2)
matriz_1
matriz_2 <- matrix(c(-5, -10, -15, -20), nr = 2)
matriz_2
matriz_1 * matriz_2
matriz_1 / matriz_2
matriz_1 + matriz_2
matriz_1 - matriz_2
# Operações com matrizes
matriz_1 <- matrix(c(5, 10, 15, 20), nr = 2)
matriz_1
matriz_2 <- matrix(c(2, 2, 2, 2), nr = 2)
matriz_2
matriz_1 * matriz_2
matriz_1 / matriz_2
matriz_1 + matriz_2
matriz_1 - matriz_2
# Multiplicando Matriz com Vetor
vetor = c(1:4)
vetor
# Multiplicando Matriz com Vetor
vetor = c(1:5)
vetor
matriz <- matrix(c(5, 10, 15, 20), nr = 2)
vetor * matrix
# Multiplicando Matriz com Vetor
vetor = c(1:4)
vetor
matriz <- matrix(c(5, 10, 15, 20), nr = 2)
vetor * matrix
vetor * matriz
# Nomeando matrizes
matriz <- matrix(c('Einstein', 'Newton', 'Hawking', 'Planck'), nr = 2)
matriz
dimnames(matriz) = (list(c("Linha-01", "Linha-02"), c("Coluna-01", "Coluna-02")))
matriz
# Nomeando a matriz, no momento da sua criação
matrix(c(5, 10, 15, 20), nr = 2, nc = 2, dimnames = list(c("Linha-01", "Linha-02" ), c("Coluna-01", " Coluna-02")))
# Combinando matrizes
matriz_a <- matrix(c(2,3,4,5), nr = 2)
matriz_a
matriz_b <- matrix(c(6,7,8,9), nr = 2)
matriz_b
cbind(matriz_a, matriz_b)
rbind(matriz_a, matriz_b)
# Desconstruindo a matriz
c(matriz_a)
# Lista de strings
lista_string_1 = list('A', 'B', 'C')
lista_string_1
lista_string_2 = list(c("A", "A"), 'B', 'C')
lista_string_2
lista_string_3 = list(matrix(c("A", "A", "A", "A"), nr = 2), 'B', 'C')
lista_string_3
lista_string_1[[1][1]]
lista_string_1[[1]1]
lista_string_1[[1][1]]
lista_inteiros = list(5, 10, 15)
lista_inteiros
lista_float = list(5.95, 10.25, 100.55)
lista_float
lista_num_complexos = list(5.2+5i, 2.5+10i)
lista_num_complexos
lista_logicos = list(TRUE, FALSE, FALSE)
lista_logicos
lista_composta = list("Linguagem R", 100, TRUE)
lista_composta
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
?rnorm
# Fatiamento da lista
lista[1]
lista[2]
lista[[2]][1]
lista[[2]][1] = "Monica"
lista[[2]][1] = "Ampère"
lista
lista[[2]][2]
# Para nomear os elementos - Listas Nomeadas
names(lista) <- c("Inteiros", "Físicos", "Números")
lista
vetor_numerico <- 1:5
vetor_caracteres <- c("Aa", "Bb", "Cc", "Dd", "Ee")
lista <- list(Numeros = vetor_numerico, Letras = vetor_caracteres)
lista
lista <- list(numeros = vetor_numerico, letras = vetor_caracteres)
lista
# Nomeando diretamente os elementos
lista <- list(elemento-A = 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista <- list(elemento-A <- 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista_nomeada <- list(elemento-A = 1:5, elemento-B = c(5.5, 10.5))
# Nomeando diretamente os elementos
lista_nomeada <- list(elementoA = 1:5, elementoB = c(5.5, 10.5))
lista_nomeada
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
# Trabalhando com elementos específicos da lista
lista <- list(1:10, c("Feynman", "Maxwell", "Schrödinger"), rnorm(10))
lista
names(lista) <- c("Inteiros", "Físicos", "Números")
lista
lista$Físicos
length(lista$Inteiros)
lista$Inteiros
# Verificando o comprimento da lista
length(lista)
# Retornando um elementos, dentro de uma nível específico da lista
lista$Físicos[2]
# Mode dos elementos
mode(lista$Números)
mode(lista$Físicos)
# Listas compostas
lista_composta = list("Linguagem R", 100, TRUE)
lista_composta
# Combinando duas listas
lista_combinada <- c(lista, lista_composta)
lista_combinada
# Transformando vetor em lista
vetor = c(1:5)
vetor
lista  = as.list(vetor)
lista
lista
# Unindo dois elementos em uma lista
matriz = matrix(1:10, nrow = 2)
matriz
vetor = c(1:10)
vetor
lista = list(matriz, vetor)
lista
# String
string <- "Isso é uma string!"
string
